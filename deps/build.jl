using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libxgboost", "xgboost"], :libxgboost),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/XGBoost-v0.82-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.aarch64-linux-gnu.tar.gz", "7a31d7ad400337ade87383281ce024e78f70e4b132ac28695947d30c6dfa9e18"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.aarch64-linux-musl.tar.gz", "9750a7ce95f6a1dba3838db602e365e60d9f973d08c883d9273806a71d5d154a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/XGBoost.v0.82.0.arm-linux-gnueabihf.tar.gz", "0b982b1ef4ee3b21df0cf22f308713603c0e6c87adecb7840a776018228678c3"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/XGBoost.v0.82.0.arm-linux-musleabihf.tar.gz", "1a402541457226102971fbc9fd36c8d3ac8928fd26b944cea84ea73ad71bc002"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.i686-linux-gnu.tar.gz", "24c88b43239b90c0d1dad7f14ecdded4e2118cad4a7e68dc943bd14cf69ce6b6"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.i686-linux-musl.tar.gz", "da0d2fd56b81a564f15de95b72c6e8fd88bbc556133066b15f6e8b839c6e2432"),
    Windows(:i686) => ("$bin_prefix/XGBoost.v0.82.0.i686-w64-mingw32.tar.gz", "1d2d262ba863e44f77d197f339587d05b9107095e1f5ce730e7066d127f29684"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.powerpc64le-linux-gnu.tar.gz", "85b9c0086e396ae8c1ad790d455f7f82b60e22c8fa43bdbd24ba3087c0cca1d0"),
    MacOS(:x86_64) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-apple-darwin14.tar.gz", "1327ad2a3d50f6443b5cfbe327816c4fca4c1384b4a2460c02721833d41206e4"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-linux-gnu.tar.gz", "cea7d51f484acaefffce87e5278eb3d7af7130cfd90c807a46ddc9a89d732752"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-linux-musl.tar.gz", "2e36287eefea8e0ba1453cd9b863035db5dbd88ce0185c2eeb323a6af20536b7"),
    Windows(:x86_64) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-w64-mingw32.tar.gz", "b667f39d93474f1c8538e6911ca9440f017992ba236bed86590c2c0aae5dddf5"),

)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
