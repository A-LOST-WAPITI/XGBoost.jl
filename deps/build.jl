using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libxgboost", "xgboost"], :libxgboost),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/XGBoost-v0.82-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.aarch64-linux-gnu.tar.gz", "268280d3582ac8dba6def28c6332aa4c4230b30670c091911eb791cbaed1467e"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.aarch64-linux-musl.tar.gz", "80689f3551b5ba1160b0e83cf31a4f8e5a216d951703efe693d7a56d5f6f8145"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/XGBoost.v0.82.0.arm-linux-gnueabihf.tar.gz", "728a3e039fff7408b0200358fd662e2b0f1aac5ac5fb28f5e217e22b92c6fd77"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/XGBoost.v0.82.0.arm-linux-musleabihf.tar.gz", "2defe056894b47c6e2850450e1a919b5a093052f5cb6d9eb74d04c612ea6bfab"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.i686-linux-gnu.tar.gz", "f7e15c9c490b82e29a94d3fd4542902dc7c82ad6c35b58b882b4827358942f30"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.i686-linux-musl.tar.gz", "18f287db4eb3ea2771843852ad9f7c67855fe16e9203fc217445c8380373425f"),
    Windows(:i686) => ("$bin_prefix/XGBoost.v0.82.0.i686-w64-mingw32.tar.gz", "413ba435095bb4e12d97c75acc2fee6541dafd26113d03324328f7161e3aa24b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.powerpc64le-linux-gnu.tar.gz", "cf1c26ffcd7fcc8c25822c69e0a95192a2dd433ec70b66edc961cc7e901e6562"),
    MacOS(:x86_64) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-apple-darwin14.tar.gz", "972211a454c79debaa2f3d53d284781ddf91046a1c1c1cb095b441761caa35d7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-linux-gnu.tar.gz", "d08d0e0471ac576bd4a403629840a6cec05c8721d7fcbaf353530820b26d7357"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-linux-musl.tar.gz", "979eaae54e10af9f5ad3556c1ad4903490e53f60d8c9cdf5698ceff4d7506a70"),
    Windows(:x86_64) => ("$bin_prefix/XGBoost.v0.82.0.x86_64-w64-mingw32.tar.gz", "ff8c65679fdb2e27ac407b6a9b2c19b713eb4086f0e0a9a145d698ad91a60114"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
